/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "github.com/openconfig/gnmitest/proto/tests/tests.proto";
import "github.com/openconfig/gnmi/proto/gnmi/gnmi.proto";

// The suite package defines a test suite that is executed within the gnmitest
// framework.
//
// A Suite message defines a set of tests that are to be run as part of a common
// test report. Each Suite contains a set of InstanceGroups, which in turn
// contain test instances, as shown below:
//
//   - Suite
//      - InstanceGroup (description: "group1")
//         - Instance   (description: "test1")
//         - Instance   (description: "test2")
//      - InstanceGroup (description: "group2")
//         - Instance   (description: "test3")
//      - InstanceGroup (description: "group3")
//         - Instance   (description: "test4")
//
// In this case, a single suite contains three instance groups (groups 1, 2 and
// 3). InstanceGroups are executed sequentially, in the order that they are
// defined within the Suite message.
//
// Instances (i.e., individual tests) within an InstanceGroup are run in
// parallel - such that the framework does not wait for the previous test to
// complete before launching the next test within the instance group.
//
// In the example above, "test1" and "test2" will be executed simultaneously.
// When both test1 and test2 have completed, test3 will be executed followed by
// test4.
//
// If any of the InstanceGroups specified set the "fatal" field to true,
// subsequent InstanceGroups are not executed, and the test is considered
// failed. This control can be used to check pre-requisites of the tests prior
// to subsequent test execution.
//
// Users should take care to ensure that tests that are defined within
// the same InstanceGroup do not overlap with one another, particularly where
// they involve manipulating the state of the gNMI target rather than simply
// reading from it.
//
// Tests can specify a schema that is expected to be used as part of the test,
// which reflects a compiled-in set of data structures that can be used to
// handle the payload of the gNMI RPC. The supported format of these data
// structures are Go structs that are produced by ygot
// (https://github.com/openconfig/ygot). If the top-level Suite specifies a
// schema, all tests that do not specify an overridden schema inherit it.
package suite;

// Suite is the main proto message that comprises all the test configuration
// for test framework.
message Suite {
  // Name of the suite. Used for reporting purposes.
  string name = 1;
  // Amount of time in seconds a test is allowed to run before cancelled.
  // This can be overridden by individual tests.
  int32 timeout = 2;
  // Schema denotes which version of compiled gostructs to use in the test. If
  // test doesn't specify one, the one specified in Suite will be effective.
  string schema = 3;
  // Connection parameters to use while dialing into target. This must be set
  // here or in all individual tests. If set both here and a test, the test
  // instance takes precedence.
  tests.Connection connection = 4;

  // Set of ExtensionList that can be referenced while composing
  // openconfig.test.Instance.
  map<string, ExtensionList> extension_list = 10;

  // List of openconfig.test.InstanceGroup that comprises the test suite.
  // openconfig.test.InstanceGroups run serially. However the tests within
  // openconfig.test.InstanceGroup run in parallel.
  repeated InstanceGroup instance_group_list  = 15;

  // A set of common request and response messages which can be referenced
  // from individual tests to reduce duplication of messages in the test
  // specification.
  CommonMessages common = 16;
}

// InstanceGroup is a list of openconfig.test.Instances to run in parallel.
// RPC requests for tests in this group will be made in parallel.
message InstanceGroup {
  // Description of the instance group. Used for reporting purposes.
  string description = 1;
  // Name of the openconfig.test.Instances to run in parallel.
  repeated Instance instance = 2;
  // Whether the failure of a test within the InstanceGroup should be considered
  // fatal for the Suite. If set to true, when one or more of the tests within
  // the group fails, all subsequent groups are not executed.
  bool fatal = 3;
}

// Instance is what the framework treats as a test. It contains all the
// information to run and report a test.
message Instance {
  // Description of the Instance. Used for reporting purposes.
  string description = 1;
  // Test configuration to use.
  tests.Test test = 2;
  // List of openconfig.test.ExtensionList to run as part of this test.
  // The tests run within the same context as the test specified in
  // this message - and have access to the same requests (e.g.,
  // subscription in the case of Subscribe tests).
  repeated string extension_list = 3;
}

// ExtensionList is a list of extensions. They run as part of the subscription
// created for the parent test in openconfig.test.Instance.
message ExtensionList {
  repeated tests.Test extension = 1;
}

// CommonMessages specifies a set of gNMI messages that are referred to
// across multiple tests. This ensures that where the same message is required
// (e.g., a SetRequest that specifies a safe initial configuration) then it
// does not require repetition in the test specification.
//
// Each specificiation is a map keyed by a unique identifying name for the
// message value of the map.
message CommonMessages {
  map<string, gnmi.SetRequest> set_requests = 1;
  map<string, gnmi.GetRequest> get_requests = 3;
  map<string, gnmi.GetResponse> get_responses = 4;
  map<string, gnmi.SubscribeRequest> subscribe_requests = 5;
}
