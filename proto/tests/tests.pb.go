// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/tests/tests.proto

package tests

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gnmi "github.com/openconfig/gnmi/proto/gnmi"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OperResult specifies the expected result of an operation. By
// default an operation is expected to succeed.
type GetSetValidationOper_OperResult int32

const (
	GetSetValidationOper_NO_ERROR GetSetValidationOper_OperResult = 0
	GetSetValidationOper_FAILED   GetSetValidationOper_OperResult = 1
)

var GetSetValidationOper_OperResult_name = map[int32]string{
	0: "NO_ERROR",
	1: "FAILED",
}
var GetSetValidationOper_OperResult_value = map[string]int32{
	"NO_ERROR": 0,
	"FAILED":   1,
}

func (x GetSetValidationOper_OperResult) String() string {
	return proto.EnumName(GetSetValidationOper_OperResult_name, int32(x))
}
func (GetSetValidationOper_OperResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{13, 0}
}

// Default message to use if test doesn't need any arguments. Default message
// will be type of the field in the message. The name of the field discriminates
// one test from another.
type Default struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Default) Reset()         { *m = Default{} }
func (m *Default) String() string { return proto.CompactTextString(m) }
func (*Default) ProtoMessage()    {}
func (*Default) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{0}
}
func (m *Default) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Default.Unmarshal(m, b)
}
func (m *Default) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Default.Marshal(b, m, deterministic)
}
func (dst *Default) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Default.Merge(dst, src)
}
func (m *Default) XXX_Size() int {
	return xxx_messageInfo_Default.Size(m)
}
func (m *Default) XXX_DiscardUnknown() {
	xxx_messageInfo_Default.DiscardUnknown(m)
}

var xxx_messageInfo_Default proto.InternalMessageInfo

// Message that contains all the information specific to a gnmi Subscribe RPC.
type SubscribeTest struct {
	// Request to use by framework during gnmi Subscribe RPC. If test is part of
	// an extension list, a real subscription isn't created, but the query is
	// registered to receive updates corresponding to its path from subscription
	// of parent test.
	Request *gnmi.SubscribeRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// log_responses indicates to the test whether it should log all
	// SubscribeResponse messages that are received from the target.
	LogResponses bool `protobuf:"varint,2,opt,name=log_responses,json=logResponses,proto3" json:"log_responses,omitempty"`
	// Types that are valid to be assigned to Args:
	//	*SubscribeTest_FakeTest
	//	*SubscribeTest_PathValidation
	//	*SubscribeTest_HasKeys
	//	*SubscribeTest_SchemapathComplete
	//	*SubscribeTest_DataTreePaths
	//	*SubscribeTest_ValueValidation
	//	*SubscribeTest_GnmipathCompliance
	Args                 isSubscribeTest_Args `protobuf_oneof:"args"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SubscribeTest) Reset()         { *m = SubscribeTest{} }
func (m *SubscribeTest) String() string { return proto.CompactTextString(m) }
func (*SubscribeTest) ProtoMessage()    {}
func (*SubscribeTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{1}
}
func (m *SubscribeTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeTest.Unmarshal(m, b)
}
func (m *SubscribeTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeTest.Marshal(b, m, deterministic)
}
func (dst *SubscribeTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeTest.Merge(dst, src)
}
func (m *SubscribeTest) XXX_Size() int {
	return xxx_messageInfo_SubscribeTest.Size(m)
}
func (m *SubscribeTest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeTest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeTest proto.InternalMessageInfo

type isSubscribeTest_Args interface {
	isSubscribeTest_Args()
}

type SubscribeTest_FakeTest struct {
	FakeTest string `protobuf:"bytes,10,opt,name=fake_test,json=fakeTest,proto3,oneof"`
}
type SubscribeTest_PathValidation struct {
	PathValidation *Default `protobuf:"bytes,11,opt,name=path_validation,json=pathValidation,proto3,oneof"`
}
type SubscribeTest_HasKeys struct {
	HasKeys *HasKeys `protobuf:"bytes,12,opt,name=has_keys,json=hasKeys,proto3,oneof"`
}
type SubscribeTest_SchemapathComplete struct {
	SchemapathComplete *SchemaPathComplete `protobuf:"bytes,13,opt,name=schemapath_complete,json=schemapathComplete,proto3,oneof"`
}
type SubscribeTest_DataTreePaths struct {
	DataTreePaths *DataTreePaths `protobuf:"bytes,14,opt,name=data_tree_paths,json=dataTreePaths,proto3,oneof"`
}
type SubscribeTest_ValueValidation struct {
	ValueValidation *Default `protobuf:"bytes,15,opt,name=value_validation,json=valueValidation,proto3,oneof"`
}
type SubscribeTest_GnmipathCompliance struct {
	GnmipathCompliance *GNMIPathCompliance `protobuf:"bytes,16,opt,name=gnmipath_compliance,json=gnmipathCompliance,proto3,oneof"`
}

func (*SubscribeTest_FakeTest) isSubscribeTest_Args()           {}
func (*SubscribeTest_PathValidation) isSubscribeTest_Args()     {}
func (*SubscribeTest_HasKeys) isSubscribeTest_Args()            {}
func (*SubscribeTest_SchemapathComplete) isSubscribeTest_Args() {}
func (*SubscribeTest_DataTreePaths) isSubscribeTest_Args()      {}
func (*SubscribeTest_ValueValidation) isSubscribeTest_Args()    {}
func (*SubscribeTest_GnmipathCompliance) isSubscribeTest_Args() {}

func (m *SubscribeTest) GetArgs() isSubscribeTest_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *SubscribeTest) GetRequest() *gnmi.SubscribeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SubscribeTest) GetLogResponses() bool {
	if m != nil {
		return m.LogResponses
	}
	return false
}

func (m *SubscribeTest) GetFakeTest() string {
	if x, ok := m.GetArgs().(*SubscribeTest_FakeTest); ok {
		return x.FakeTest
	}
	return ""
}

func (m *SubscribeTest) GetPathValidation() *Default {
	if x, ok := m.GetArgs().(*SubscribeTest_PathValidation); ok {
		return x.PathValidation
	}
	return nil
}

func (m *SubscribeTest) GetHasKeys() *HasKeys {
	if x, ok := m.GetArgs().(*SubscribeTest_HasKeys); ok {
		return x.HasKeys
	}
	return nil
}

func (m *SubscribeTest) GetSchemapathComplete() *SchemaPathComplete {
	if x, ok := m.GetArgs().(*SubscribeTest_SchemapathComplete); ok {
		return x.SchemapathComplete
	}
	return nil
}

func (m *SubscribeTest) GetDataTreePaths() *DataTreePaths {
	if x, ok := m.GetArgs().(*SubscribeTest_DataTreePaths); ok {
		return x.DataTreePaths
	}
	return nil
}

func (m *SubscribeTest) GetValueValidation() *Default {
	if x, ok := m.GetArgs().(*SubscribeTest_ValueValidation); ok {
		return x.ValueValidation
	}
	return nil
}

func (m *SubscribeTest) GetGnmipathCompliance() *GNMIPathCompliance {
	if x, ok := m.GetArgs().(*SubscribeTest_GnmipathCompliance); ok {
		return x.GnmipathCompliance
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SubscribeTest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SubscribeTest_OneofMarshaler, _SubscribeTest_OneofUnmarshaler, _SubscribeTest_OneofSizer, []interface{}{
		(*SubscribeTest_FakeTest)(nil),
		(*SubscribeTest_PathValidation)(nil),
		(*SubscribeTest_HasKeys)(nil),
		(*SubscribeTest_SchemapathComplete)(nil),
		(*SubscribeTest_DataTreePaths)(nil),
		(*SubscribeTest_ValueValidation)(nil),
		(*SubscribeTest_GnmipathCompliance)(nil),
	}
}

func _SubscribeTest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SubscribeTest)
	// args
	switch x := m.Args.(type) {
	case *SubscribeTest_FakeTest:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.FakeTest)
	case *SubscribeTest_PathValidation:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PathValidation); err != nil {
			return err
		}
	case *SubscribeTest_HasKeys:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasKeys); err != nil {
			return err
		}
	case *SubscribeTest_SchemapathComplete:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchemapathComplete); err != nil {
			return err
		}
	case *SubscribeTest_DataTreePaths:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataTreePaths); err != nil {
			return err
		}
	case *SubscribeTest_ValueValidation:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ValueValidation); err != nil {
			return err
		}
	case *SubscribeTest_GnmipathCompliance:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GnmipathCompliance); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SubscribeTest.Args has unexpected type %T", x)
	}
	return nil
}

func _SubscribeTest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SubscribeTest)
	switch tag {
	case 10: // args.fake_test
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Args = &SubscribeTest_FakeTest{x}
		return true, err
	case 11: // args.path_validation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Default)
		err := b.DecodeMessage(msg)
		m.Args = &SubscribeTest_PathValidation{msg}
		return true, err
	case 12: // args.has_keys
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasKeys)
		err := b.DecodeMessage(msg)
		m.Args = &SubscribeTest_HasKeys{msg}
		return true, err
	case 13: // args.schemapath_complete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchemaPathComplete)
		err := b.DecodeMessage(msg)
		m.Args = &SubscribeTest_SchemapathComplete{msg}
		return true, err
	case 14: // args.data_tree_paths
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataTreePaths)
		err := b.DecodeMessage(msg)
		m.Args = &SubscribeTest_DataTreePaths{msg}
		return true, err
	case 15: // args.value_validation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Default)
		err := b.DecodeMessage(msg)
		m.Args = &SubscribeTest_ValueValidation{msg}
		return true, err
	case 16: // args.gnmipath_compliance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GNMIPathCompliance)
		err := b.DecodeMessage(msg)
		m.Args = &SubscribeTest_GnmipathCompliance{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SubscribeTest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SubscribeTest)
	// args
	switch x := m.Args.(type) {
	case *SubscribeTest_FakeTest:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.FakeTest)))
		n += len(x.FakeTest)
	case *SubscribeTest_PathValidation:
		s := proto.Size(x.PathValidation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeTest_HasKeys:
		s := proto.Size(x.HasKeys)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeTest_SchemapathComplete:
		s := proto.Size(x.SchemapathComplete)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeTest_DataTreePaths:
		s := proto.Size(x.DataTreePaths)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeTest_ValueValidation:
		s := proto.Size(x.ValueValidation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeTest_GnmipathCompliance:
		s := proto.Size(x.GnmipathCompliance)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Test specifies a gNMI test. The type indicates the form of test that is
// being performed.
//
// The authentication for the RPC(s) used in the test is specified in
// username_key and password_key. These values are references to an external
// storage of authentication data that can be retrieved by the framework.
type Test struct {
	// Description of the individual test to use for reporting purposes.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Amount of time in seconds test is allowed to run before cancelled.
	Timeout int32 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The compiled schema that should be used within the test.
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// Connection parameters to dial into target. If not specified, the one
	// specified by Suite proto is used.
	Connection *Connection `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection,omitempty"`
	// Can be extended to include other gNMI RPCs.
	//
	// Types that are valid to be assigned to Type:
	//	*Test_Subscribe
	//	*Test_GetSet
	//	*Test_FakeTest
	Type                 isTest_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{2}
}
func (m *Test) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test.Unmarshal(m, b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test.Marshal(b, m, deterministic)
}
func (dst *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(dst, src)
}
func (m *Test) XXX_Size() int {
	return xxx_messageInfo_Test.Size(m)
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

type isTest_Type interface {
	isTest_Type()
}

type Test_Subscribe struct {
	Subscribe *SubscribeTest `protobuf:"bytes,10,opt,name=subscribe,proto3,oneof"`
}
type Test_GetSet struct {
	GetSet *GetSetTest `protobuf:"bytes,11,opt,name=get_set,json=getSet,proto3,oneof"`
}
type Test_FakeTest struct {
	FakeTest *FakeTest `protobuf:"bytes,12,opt,name=fake_test,json=fakeTest,proto3,oneof"`
}

func (*Test_Subscribe) isTest_Type() {}
func (*Test_GetSet) isTest_Type()    {}
func (*Test_FakeTest) isTest_Type()  {}

func (m *Test) GetType() isTest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Test) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Test) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Test) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Test) GetConnection() *Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *Test) GetSubscribe() *SubscribeTest {
	if x, ok := m.GetType().(*Test_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (m *Test) GetGetSet() *GetSetTest {
	if x, ok := m.GetType().(*Test_GetSet); ok {
		return x.GetSet
	}
	return nil
}

func (m *Test) GetFakeTest() *FakeTest {
	if x, ok := m.GetType().(*Test_FakeTest); ok {
		return x.FakeTest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Test) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Test_OneofMarshaler, _Test_OneofUnmarshaler, _Test_OneofSizer, []interface{}{
		(*Test_Subscribe)(nil),
		(*Test_GetSet)(nil),
		(*Test_FakeTest)(nil),
	}
}

func _Test_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Test)
	// type
	switch x := m.Type.(type) {
	case *Test_Subscribe:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Subscribe); err != nil {
			return err
		}
	case *Test_GetSet:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetSet); err != nil {
			return err
		}
	case *Test_FakeTest:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FakeTest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Test.Type has unexpected type %T", x)
	}
	return nil
}

func _Test_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Test)
	switch tag {
	case 10: // type.subscribe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubscribeTest)
		err := b.DecodeMessage(msg)
		m.Type = &Test_Subscribe{msg}
		return true, err
	case 11: // type.get_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetSetTest)
		err := b.DecodeMessage(msg)
		m.Type = &Test_GetSet{msg}
		return true, err
	case 12: // type.fake_test
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FakeTest)
		err := b.DecodeMessage(msg)
		m.Type = &Test_FakeTest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Test_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Test)
	// type
	switch x := m.Type.(type) {
	case *Test_Subscribe:
		s := proto.Size(x.Subscribe)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Test_GetSet:
		s := proto.Size(x.GetSet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Test_FakeTest:
		s := proto.Size(x.FakeTest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Credentials to use while connecting to target.
type Credentials struct {
	// Resolver value is used to determine which credentials resolver to pick
	// while resolving username and password to use during gNMI connection. By
	// default, plaintext resolver is used if nothing is specified here. If a
	// special resolver is needed, it needs to be registered into global resolvers
	// table.
	Resolver             string   `protobuf:"bytes,1,opt,name=resolver,proto3" json:"resolver,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Credentials) Reset()         { *m = Credentials{} }
func (m *Credentials) String() string { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()    {}
func (*Credentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{3}
}
func (m *Credentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Credentials.Unmarshal(m, b)
}
func (m *Credentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Credentials.Marshal(b, m, deterministic)
}
func (dst *Credentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credentials.Merge(dst, src)
}
func (m *Credentials) XXX_Size() int {
	return xxx_messageInfo_Credentials.Size(m)
}
func (m *Credentials) XXX_DiscardUnknown() {
	xxx_messageInfo_Credentials.DiscardUnknown(m)
}

var xxx_messageInfo_Credentials proto.InternalMessageInfo

func (m *Credentials) GetResolver() string {
	if m != nil {
		return m.Resolver
	}
	return ""
}

func (m *Credentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Credentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Connection contains required information to be able to dial into a target.
type Connection struct {
	// The name of the target to be set in gNMI messages. For gNMI implementations
	// that can be address multiple targets, this value can be used to specify
	// which one should be the device under test.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Address is used while dialing into gNMI server under test. It needs to be
	// in the form "host:port" or it should resolve to a "host:port".
	Address     string       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Credentials *Credentials `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// Dial timeout in seconds while connecting to gNMI server under test.
	Timeout              int32    `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Connection) Reset()         { *m = Connection{} }
func (m *Connection) String() string { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()    {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{4}
}
func (m *Connection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Connection.Unmarshal(m, b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
}
func (dst *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(dst, src)
}
func (m *Connection) XXX_Size() int {
	return xxx_messageInfo_Connection.Size(m)
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

func (m *Connection) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Connection) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Connection) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *Connection) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// FakeTest is the configuration used for a fake test within the framework.
type FakeTest struct {
	// pass indicates whether the faked test should pass or fail.
	Pass                 bool     `protobuf:"varint,1,opt,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FakeTest) Reset()         { *m = FakeTest{} }
func (m *FakeTest) String() string { return proto.CompactTextString(m) }
func (*FakeTest) ProtoMessage()    {}
func (*FakeTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{5}
}
func (m *FakeTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FakeTest.Unmarshal(m, b)
}
func (m *FakeTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FakeTest.Marshal(b, m, deterministic)
}
func (dst *FakeTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FakeTest.Merge(dst, src)
}
func (m *FakeTest) XXX_Size() int {
	return xxx_messageInfo_FakeTest.Size(m)
}
func (m *FakeTest) XXX_DiscardUnknown() {
	xxx_messageInfo_FakeTest.DiscardUnknown(m)
}

var xxx_messageInfo_FakeTest proto.InternalMessageInfo

func (m *FakeTest) GetPass() bool {
	if m != nil {
		return m.Pass
	}
	return false
}

// HasKeys defines the input for a test that checks that a particular list
// in the schema has a specified set of keys in the list. It can be used
// to check for data completeness of a particular list within the schema.
type HasKeys struct {
	// Path to the list that should be checked.
	Path *gnmi.Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Items that should be found in the list.
	Item                 []*HasKeys_Item `protobuf:"bytes,2,rep,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HasKeys) Reset()         { *m = HasKeys{} }
func (m *HasKeys) String() string { return proto.CompactTextString(m) }
func (*HasKeys) ProtoMessage()    {}
func (*HasKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{6}
}
func (m *HasKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasKeys.Unmarshal(m, b)
}
func (m *HasKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasKeys.Marshal(b, m, deterministic)
}
func (dst *HasKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasKeys.Merge(dst, src)
}
func (m *HasKeys) XXX_Size() int {
	return xxx_messageInfo_HasKeys.Size(m)
}
func (m *HasKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_HasKeys.DiscardUnknown(m)
}

var xxx_messageInfo_HasKeys proto.InternalMessageInfo

func (m *HasKeys) GetPath() *gnmi.Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *HasKeys) GetItem() []*HasKeys_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

// Item defines an entry in the list.
type HasKeys_Item struct {
	Key                  map[string]string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HasKeys_Item) Reset()         { *m = HasKeys_Item{} }
func (m *HasKeys_Item) String() string { return proto.CompactTextString(m) }
func (*HasKeys_Item) ProtoMessage()    {}
func (*HasKeys_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{6, 0}
}
func (m *HasKeys_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasKeys_Item.Unmarshal(m, b)
}
func (m *HasKeys_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasKeys_Item.Marshal(b, m, deterministic)
}
func (dst *HasKeys_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasKeys_Item.Merge(dst, src)
}
func (m *HasKeys_Item) XXX_Size() int {
	return xxx_messageInfo_HasKeys_Item.Size(m)
}
func (m *HasKeys_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_HasKeys_Item.DiscardUnknown(m)
}

var xxx_messageInfo_HasKeys_Item proto.InternalMessageInfo

func (m *HasKeys_Item) GetKey() map[string]string {
	if m != nil {
		return m.Key
	}
	return nil
}

// GNMIPathCompliance defines the test to validate target and origin fields of
// gNMI Path as well as usage of Elem field instead of deprecated Element field.
// If check_target and/or check_origin fields are set to "*", corresponding
// field in gNMI prefix path must exist, but can be any value. If they are set
// to a value other than "*", corresponding field must be equal to the value. If
// check_target and/or check_origin isn't set or set to an empty string, this
// means no validation is needed on the corresponding field. For instance:
//
// {
//   // target must exist, but can have any value other than empty string
//   check_target: "*"
//   // origin must exist and be equal to "openconfig"
//   check_origin: "openconfig"
//   // Elem field of gNMI Path must be used instead of Element field
//   check_elem: true
// }
type GNMIPathCompliance struct {
	CheckElem            bool     `protobuf:"varint,1,opt,name=check_elem,json=checkElem,proto3" json:"check_elem,omitempty"`
	CheckTarget          string   `protobuf:"bytes,2,opt,name=check_target,json=checkTarget,proto3" json:"check_target,omitempty"`
	CheckOrigin          string   `protobuf:"bytes,3,opt,name=check_origin,json=checkOrigin,proto3" json:"check_origin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GNMIPathCompliance) Reset()         { *m = GNMIPathCompliance{} }
func (m *GNMIPathCompliance) String() string { return proto.CompactTextString(m) }
func (*GNMIPathCompliance) ProtoMessage()    {}
func (*GNMIPathCompliance) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{7}
}
func (m *GNMIPathCompliance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GNMIPathCompliance.Unmarshal(m, b)
}
func (m *GNMIPathCompliance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GNMIPathCompliance.Marshal(b, m, deterministic)
}
func (dst *GNMIPathCompliance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GNMIPathCompliance.Merge(dst, src)
}
func (m *GNMIPathCompliance) XXX_Size() int {
	return xxx_messageInfo_GNMIPathCompliance.Size(m)
}
func (m *GNMIPathCompliance) XXX_DiscardUnknown() {
	xxx_messageInfo_GNMIPathCompliance.DiscardUnknown(m)
}

var xxx_messageInfo_GNMIPathCompliance proto.InternalMessageInfo

func (m *GNMIPathCompliance) GetCheckElem() bool {
	if m != nil {
		return m.CheckElem
	}
	return false
}

func (m *GNMIPathCompliance) GetCheckTarget() string {
	if m != nil {
		return m.CheckTarget
	}
	return ""
}

func (m *GNMIPathCompliance) GetCheckOrigin() string {
	if m != nil {
		return m.CheckOrigin
	}
	return ""
}

// DataTreePaths specifies a test which allows for checks for the
// existence of particular data within the data tree. It allows recursion
// into lists, or simple queries for data tree paths.
//
// A test which performs a simple check for a data tree path consists
// of a single TestQuery, which specifies the path to be queried. For example,
// to query for the existence of the
// /interfaces/interface[name=eth0]/state/counters/{in,out}-pkts leaves in the
// received data a query specifying:
//
// {
//   steps { name: "interfaces" }
//   steps { name: "interface" key { name: "name" value: "eth0" } }
//   required_paths {
//     prefix {
//       elem { name: "state" }
//       elem { name: "counters" }
//     }
//     paths { elem { name: "in-pkts" } }
//     paths { elem { name: "out-pkts" } }
//   }
// }
//
// is specified. This query is simply expanded to check for the specified paths.
//
// The test also supports querying recursively down the data tree using the
// GetListKeys message within a particular TestQuery. Such a query specifies
// that the query described by the "steps" repeated should be made, and the
// resulting key values of the list found should be assigned into an array.
// Subsequent nested queries can then refer to a value within that array using
// the variable name specified.
//
// For example, if a test wishes to performn a check for
// each interface within the data tree, then nested TestQuery
// messages are required. The first retrieves the keys of the
// /interfaces/interface list from the data tree - and calls a nested TestQuery
// for each key within the /interfaces/interface list (referred to as
// %%interface%%) which performs the actual check:
//
// {
//   steps { name: "interfaces" }
//   steps { name: "interface"  }
//   get_list_keys {
//     var_name: "%%interface%%"
//     next_query {
//       steps { name: "interfaces" }
//       steps { name: "interface" key_name: "%%interface%%" }
//       required_paths {
//         prefix: {
//           elem: "state"
//           elem: "counters"
//        }
//        paths { elem { name: "in-pkts" } }
//        paths { elem { name: "out-pkts" } }
//      }
//    }
//   }
// }
//
// Will execute first a query for /interfaces/interface and assign the
// results to the %%interface%% variable. The child operation will execute
// for each element of the %%interface%% list, and subsequently make a query
// for /interfaces/interface[%%interface%%] where %%interface%% is an individual
// key found in the parent query (e.g., "name=eth0"). The child operation
// checks for the required paths at state/counters/{in,out}-pkts relative to
// the query made in the ListQuery operation.
//
// Where multiple get_list_keys queries are nested, each next_query is called
// for each value of its parent query, such that it is possible to express
// nested list traversals such as:
//
// foreach interface in /interfaces/interface:
//   foreach subinterface of that interface:
//     foreach ipv4 address of that subinterface:
//       ... etc ...
//
//  using nested queries:
//
//  {
//    steps { name: "interfaces" }
//    steps { name: "interface" }
//    get_list_keys {
//      var_name: "%%interface%%"
//      next_query {
//        steps { name: "interfaces" }
//        steps { name: "interface" key_name: "%%interface%%" }
//        steps { name: "subinterfaces" }
//        steps { name: "subinterface" }
//        get_list_keys {
//          var_name: "%%subinterface%%"
//          next_query {
//            steps { name: "interfaces" }
//            steps { name: "interface" key_name: "%%interface%%" }
//            steps { name: "subinterfaces" }
//            steps { name: "subinterface" key_name: "%%subinterface%%" }
//            steps { name: "ipv4" }
//            steps { name: "addresses" }
//            steps { name: "address" }
//            get_list_keys {
//              var_name: "%%v4address%%"
//              next_query {
//                steps { name: "interfaces" }
//                steps { name: "interface" key_name: "%%interface%%" }
//                steps { name: "subinterfaces" }
//                steps { name: "subinterface" key_name: "%%subinterface%%" }
//                steps { name: "ipv4" }
//                steps { name: "addresses" }
//                steps { name: "address"  key_name: "%%v4address%%" }
//                required_paths {
//                  ... actual test with required paths ...
//                }
//              }
//            }
//          }
//        }
//      }
//    }
//  }
//
//
// The filter field within a TestQuery can be used to filter the set of list
// items that are to be iterated over. When a PathValueMatch filter is
// specified, its contents are evaluated, and only when the result of the match
// is true is the item in the list iterated over.
//
// For example, it is possible to iterate over components of a particular type
// within the OpenConfig schema by specifying a filter:
//
// {
//   steps: "components"
//   steps: "component"
//   get_list_keys {
//     var_name: "%%component_name%%"
//     filter {
//       path {
//         elem { name: "state" }
//         elem { name: "type" }
//       }
//       equal { string_val: "TRANSCEIVER" }
//     }
//     next_query {
//       required_paths {
//         prefix { name: "state" }
//         paths { name: "mfg-name" }
//         paths { name: "serial-no" }
//       }
//     }
//   }
// }
//
// The get_list_keys query is filtered according to the criteria described in
// the "filter". The path specified in this message must be relative to the
// current selection.
//
// It is also possible to filter based on multiple queries, using the "and" and
// "or" fields of the PathValueMatch message, for example, to filter on
// components of type LINECARD or PORT, the following PathValueMatch is
// specified:
//
// {
//   path {
//     elem { name: "state" }
//     elem { name: "type" }
//   }
//   equal { string_val: "LINECARD" }
//   or {
//     path {
//       elem { name: "state" }
//       elem { name: "type" }
//     }
//     equal { string_val: PORT" }
//   }
// }
//
// The "or" field specifies that a PathValueMatch should be evaluated to true if
// the parent or any "or" query evaluates to true.
//
// If multiple filters, are required, for example, to match multiple list keys,
// the "and" field can be used within a PathValueMatch:
//
// {
//   // Assume we are within a query of the
//   // network-instances/network-instance/protocols/protocol list.
//   path {
//     elem { name: "state" }
//     elem { name: "identifier" }
//   }
//   equal { string_val: "BGP" }
//   and {
//     path {
//       elem { name: "state" }
//       elem { name: "name" }
//     }
//     equal { string_val: "15169" }
//   }
// }
//
// As well as requiring a specific set of paths to exist, the datatreepaths test
// can be used to test values within the data tree, using the required_values
// field. For example, to validate that all non-logical interfaces have LLDP
// enabled, the following query can be formulated -- checking that
// /lldp/interfaces/interface[name=<if-name>]/state/enabled = true:
//
// {
//   steps { name: "interfaces" }
//   steps { name: "interface" }
//   get_list_keys {
//     var_name: "<if-name>"
//     filter {
//       path {
//         elem { name: "state" }
//         elem { name: "logical" }
//       }
//       equal { bool_val: false }
//     }
//     next_query {
//       steps { name: "lldp" }
//       steps { name: "interfaces" }
//       steps { name: "interface" key_name: "<if-name>" }
//       required_values {
//         prefix {
//           elem { name: "state" }
//         }
//         matches {
//           path {
//             elem { name: "enabled" }
//           }
//           equal { bool_val: true }
//         }
//       }
//     }
//   }
// }
type DataTreePaths struct {
	// test_oper is the operation to be performed for the test.
	TestOper             *DataTreePaths_TestQuery `protobuf:"bytes,1,opt,name=test_oper,json=testOper,proto3" json:"test_oper,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DataTreePaths) Reset()         { *m = DataTreePaths{} }
func (m *DataTreePaths) String() string { return proto.CompactTextString(m) }
func (*DataTreePaths) ProtoMessage()    {}
func (*DataTreePaths) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{8}
}
func (m *DataTreePaths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataTreePaths.Unmarshal(m, b)
}
func (m *DataTreePaths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataTreePaths.Marshal(b, m, deterministic)
}
func (dst *DataTreePaths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataTreePaths.Merge(dst, src)
}
func (m *DataTreePaths) XXX_Size() int {
	return xxx_messageInfo_DataTreePaths.Size(m)
}
func (m *DataTreePaths) XXX_DiscardUnknown() {
	xxx_messageInfo_DataTreePaths.DiscardUnknown(m)
}

var xxx_messageInfo_DataTreePaths proto.InternalMessageInfo

func (m *DataTreePaths) GetTestOper() *DataTreePaths_TestQuery {
	if m != nil {
		return m.TestOper
	}
	return nil
}

// QueryStep defines a query against the gNMI path of a data tree element.
type DataTreePaths_QueryStep struct {
	// name specifies a name that should be explicitly matched in the
	// gnmi.PathElem the QueryStep is being compared to.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// key specifies the key map which should be explicitly matched in
	// the gnmi.PathElem the QueryStep is being compared to.
	Key map[string]string `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key_name specifies the name of a variable that has been written to
	// by a previous stage of the test. The value of the key map in the
	// PathElem is substituted for the value currently being iterated over
	// for the variable.
	KeyName              string   `protobuf:"bytes,3,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataTreePaths_QueryStep) Reset()         { *m = DataTreePaths_QueryStep{} }
func (m *DataTreePaths_QueryStep) String() string { return proto.CompactTextString(m) }
func (*DataTreePaths_QueryStep) ProtoMessage()    {}
func (*DataTreePaths_QueryStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{8, 0}
}
func (m *DataTreePaths_QueryStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataTreePaths_QueryStep.Unmarshal(m, b)
}
func (m *DataTreePaths_QueryStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataTreePaths_QueryStep.Marshal(b, m, deterministic)
}
func (dst *DataTreePaths_QueryStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataTreePaths_QueryStep.Merge(dst, src)
}
func (m *DataTreePaths_QueryStep) XXX_Size() int {
	return xxx_messageInfo_DataTreePaths_QueryStep.Size(m)
}
func (m *DataTreePaths_QueryStep) XXX_DiscardUnknown() {
	xxx_messageInfo_DataTreePaths_QueryStep.DiscardUnknown(m)
}

var xxx_messageInfo_DataTreePaths_QueryStep proto.InternalMessageInfo

func (m *DataTreePaths_QueryStep) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataTreePaths_QueryStep) GetKey() map[string]string {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DataTreePaths_QueryStep) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

// TestQuery specifies a single stage of a query within the test.
type DataTreePaths_TestQuery struct {
	// steps specifies the set of QuerySteps that should be made against the
	// data tree to retrieve the data for the operation being performed.
	Steps []*DataTreePaths_QueryStep `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*DataTreePaths_TestQuery_GetListKeys
	//	*DataTreePaths_TestQuery_RequiredPaths
	//	*DataTreePaths_TestQuery_RequiredValues
	Type                 isDataTreePaths_TestQuery_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *DataTreePaths_TestQuery) Reset()         { *m = DataTreePaths_TestQuery{} }
func (m *DataTreePaths_TestQuery) String() string { return proto.CompactTextString(m) }
func (*DataTreePaths_TestQuery) ProtoMessage()    {}
func (*DataTreePaths_TestQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{8, 1}
}
func (m *DataTreePaths_TestQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataTreePaths_TestQuery.Unmarshal(m, b)
}
func (m *DataTreePaths_TestQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataTreePaths_TestQuery.Marshal(b, m, deterministic)
}
func (dst *DataTreePaths_TestQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataTreePaths_TestQuery.Merge(dst, src)
}
func (m *DataTreePaths_TestQuery) XXX_Size() int {
	return xxx_messageInfo_DataTreePaths_TestQuery.Size(m)
}
func (m *DataTreePaths_TestQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DataTreePaths_TestQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DataTreePaths_TestQuery proto.InternalMessageInfo

type isDataTreePaths_TestQuery_Type interface {
	isDataTreePaths_TestQuery_Type()
}

type DataTreePaths_TestQuery_GetListKeys struct {
	GetListKeys *DataTreePaths_ListQuery `protobuf:"bytes,2,opt,name=get_list_keys,json=getListKeys,proto3,oneof"`
}
type DataTreePaths_TestQuery_RequiredPaths struct {
	RequiredPaths *DataTreePaths_RequiredPaths `protobuf:"bytes,3,opt,name=required_paths,json=requiredPaths,proto3,oneof"`
}
type DataTreePaths_TestQuery_RequiredValues struct {
	RequiredValues *DataTreePaths_RequiredValues `protobuf:"bytes,4,opt,name=required_values,json=requiredValues,proto3,oneof"`
}

func (*DataTreePaths_TestQuery_GetListKeys) isDataTreePaths_TestQuery_Type()    {}
func (*DataTreePaths_TestQuery_RequiredPaths) isDataTreePaths_TestQuery_Type()  {}
func (*DataTreePaths_TestQuery_RequiredValues) isDataTreePaths_TestQuery_Type() {}

func (m *DataTreePaths_TestQuery) GetType() isDataTreePaths_TestQuery_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DataTreePaths_TestQuery) GetSteps() []*DataTreePaths_QueryStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *DataTreePaths_TestQuery) GetGetListKeys() *DataTreePaths_ListQuery {
	if x, ok := m.GetType().(*DataTreePaths_TestQuery_GetListKeys); ok {
		return x.GetListKeys
	}
	return nil
}

func (m *DataTreePaths_TestQuery) GetRequiredPaths() *DataTreePaths_RequiredPaths {
	if x, ok := m.GetType().(*DataTreePaths_TestQuery_RequiredPaths); ok {
		return x.RequiredPaths
	}
	return nil
}

func (m *DataTreePaths_TestQuery) GetRequiredValues() *DataTreePaths_RequiredValues {
	if x, ok := m.GetType().(*DataTreePaths_TestQuery_RequiredValues); ok {
		return x.RequiredValues
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DataTreePaths_TestQuery) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DataTreePaths_TestQuery_OneofMarshaler, _DataTreePaths_TestQuery_OneofUnmarshaler, _DataTreePaths_TestQuery_OneofSizer, []interface{}{
		(*DataTreePaths_TestQuery_GetListKeys)(nil),
		(*DataTreePaths_TestQuery_RequiredPaths)(nil),
		(*DataTreePaths_TestQuery_RequiredValues)(nil),
	}
}

func _DataTreePaths_TestQuery_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DataTreePaths_TestQuery)
	// type
	switch x := m.Type.(type) {
	case *DataTreePaths_TestQuery_GetListKeys:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetListKeys); err != nil {
			return err
		}
	case *DataTreePaths_TestQuery_RequiredPaths:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequiredPaths); err != nil {
			return err
		}
	case *DataTreePaths_TestQuery_RequiredValues:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequiredValues); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DataTreePaths_TestQuery.Type has unexpected type %T", x)
	}
	return nil
}

func _DataTreePaths_TestQuery_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DataTreePaths_TestQuery)
	switch tag {
	case 2: // type.get_list_keys
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataTreePaths_ListQuery)
		err := b.DecodeMessage(msg)
		m.Type = &DataTreePaths_TestQuery_GetListKeys{msg}
		return true, err
	case 3: // type.required_paths
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataTreePaths_RequiredPaths)
		err := b.DecodeMessage(msg)
		m.Type = &DataTreePaths_TestQuery_RequiredPaths{msg}
		return true, err
	case 4: // type.required_values
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataTreePaths_RequiredValues)
		err := b.DecodeMessage(msg)
		m.Type = &DataTreePaths_TestQuery_RequiredValues{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DataTreePaths_TestQuery_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DataTreePaths_TestQuery)
	// type
	switch x := m.Type.(type) {
	case *DataTreePaths_TestQuery_GetListKeys:
		s := proto.Size(x.GetListKeys)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataTreePaths_TestQuery_RequiredPaths:
		s := proto.Size(x.RequiredPaths)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DataTreePaths_TestQuery_RequiredValues:
		s := proto.Size(x.RequiredValues)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ListQuery specifies an operation that retrieves the keys from a list.
type DataTreePaths_ListQuery struct {
	// var_name specifies the variable name by which the key values will
	// be referred to in subsequent queries.
	VarName string `protobuf:"bytes,1,opt,name=var_name,json=varName,proto3" json:"var_name,omitempty"`
	// next_query specifies a query that should be run for each key that
	// is retrieved by the ListQuery operation.
	NextQuery *DataTreePaths_TestQuery `protobuf:"bytes,2,opt,name=next_query,json=nextQuery,proto3" json:"next_query,omitempty"`
	// filter specifies a set of filters that must be met for each entry
	// in the list for it to be included in subsequent iterations. If it
	// is not set then all entries are iterated.
	Filter               []*PathValueMatch `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DataTreePaths_ListQuery) Reset()         { *m = DataTreePaths_ListQuery{} }
func (m *DataTreePaths_ListQuery) String() string { return proto.CompactTextString(m) }
func (*DataTreePaths_ListQuery) ProtoMessage()    {}
func (*DataTreePaths_ListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{8, 2}
}
func (m *DataTreePaths_ListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataTreePaths_ListQuery.Unmarshal(m, b)
}
func (m *DataTreePaths_ListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataTreePaths_ListQuery.Marshal(b, m, deterministic)
}
func (dst *DataTreePaths_ListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataTreePaths_ListQuery.Merge(dst, src)
}
func (m *DataTreePaths_ListQuery) XXX_Size() int {
	return xxx_messageInfo_DataTreePaths_ListQuery.Size(m)
}
func (m *DataTreePaths_ListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DataTreePaths_ListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DataTreePaths_ListQuery proto.InternalMessageInfo

func (m *DataTreePaths_ListQuery) GetVarName() string {
	if m != nil {
		return m.VarName
	}
	return ""
}

func (m *DataTreePaths_ListQuery) GetNextQuery() *DataTreePaths_TestQuery {
	if m != nil {
		return m.NextQuery
	}
	return nil
}

func (m *DataTreePaths_ListQuery) GetFilter() []*PathValueMatch {
	if m != nil {
		return m.Filter
	}
	return nil
}

// RequiredPaths specifies an operation that checks for paths within
// the data tree.
type DataTreePaths_RequiredPaths struct {
	// prefix is a common prefix for the paths within the required_paths
	// list.
	Prefix *gnmi.Path `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// paths is the set of paths that are to be checked for.
	Paths                []*gnmi.Path `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DataTreePaths_RequiredPaths) Reset()         { *m = DataTreePaths_RequiredPaths{} }
func (m *DataTreePaths_RequiredPaths) String() string { return proto.CompactTextString(m) }
func (*DataTreePaths_RequiredPaths) ProtoMessage()    {}
func (*DataTreePaths_RequiredPaths) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{8, 3}
}
func (m *DataTreePaths_RequiredPaths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataTreePaths_RequiredPaths.Unmarshal(m, b)
}
func (m *DataTreePaths_RequiredPaths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataTreePaths_RequiredPaths.Marshal(b, m, deterministic)
}
func (dst *DataTreePaths_RequiredPaths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataTreePaths_RequiredPaths.Merge(dst, src)
}
func (m *DataTreePaths_RequiredPaths) XXX_Size() int {
	return xxx_messageInfo_DataTreePaths_RequiredPaths.Size(m)
}
func (m *DataTreePaths_RequiredPaths) XXX_DiscardUnknown() {
	xxx_messageInfo_DataTreePaths_RequiredPaths.DiscardUnknown(m)
}

var xxx_messageInfo_DataTreePaths_RequiredPaths proto.InternalMessageInfo

func (m *DataTreePaths_RequiredPaths) GetPrefix() *gnmi.Path {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *DataTreePaths_RequiredPaths) GetPaths() []*gnmi.Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

// RequiredValues specifies an operation that checks values within
// the data tree.
type DataTreePaths_RequiredValues struct {
	// prefix is a common prefix for the paths within the required_values
	// list.
	Prefix *gnmi.Path `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// matches specifies a set of path to value criteria that must be met.
	// Each match is considered in isolation to evalute to true or false.
	// The test fails if any of the matches evaluate to false.
	Matches              []*PathValueMatch `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DataTreePaths_RequiredValues) Reset()         { *m = DataTreePaths_RequiredValues{} }
func (m *DataTreePaths_RequiredValues) String() string { return proto.CompactTextString(m) }
func (*DataTreePaths_RequiredValues) ProtoMessage()    {}
func (*DataTreePaths_RequiredValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{8, 4}
}
func (m *DataTreePaths_RequiredValues) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataTreePaths_RequiredValues.Unmarshal(m, b)
}
func (m *DataTreePaths_RequiredValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataTreePaths_RequiredValues.Marshal(b, m, deterministic)
}
func (dst *DataTreePaths_RequiredValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataTreePaths_RequiredValues.Merge(dst, src)
}
func (m *DataTreePaths_RequiredValues) XXX_Size() int {
	return xxx_messageInfo_DataTreePaths_RequiredValues.Size(m)
}
func (m *DataTreePaths_RequiredValues) XXX_DiscardUnknown() {
	xxx_messageInfo_DataTreePaths_RequiredValues.DiscardUnknown(m)
}

var xxx_messageInfo_DataTreePaths_RequiredValues proto.InternalMessageInfo

func (m *DataTreePaths_RequiredValues) GetPrefix() *gnmi.Path {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *DataTreePaths_RequiredValues) GetMatches() []*PathValueMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

// PathValueMatch specifies a match critiera for a set of gNMI paths.
// It is used to express criteria that a gNMI path must match.
type PathValueMatch struct {
	// path is the path to be verified. It can be absolute or relative
	// based pon the context that the PathValueMatch message is used.
	Path *gnmi.Path `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// criteria specifies the condition to be met for the value at the
	// path.
	//
	// Types that are valid to be assigned to Criteria:
	//	*PathValueMatch_Equal
	Criteria isPathValueMatch_Criteria `protobuf_oneof:"criteria"`
	// and specifies a set of additional matches that must be met for
	// the test to evaluate to true. If any matches are not met, the
	// match is false.
	//
	// For example, if the following message is specified:
	// {
	//   path {
	//     elem { name: "system" }
	//     elem { name: "state" }
	//     elem { name: "hostname" }
	//   }
	//   equal { string_val: "box0" }
	//   and {
	//     path {
	//       elem { name: "system" }
	//       elem { name: "state" }
	//       elem { name: "domain-name" }
	//     }
	//     equal { string_val: "openconfig.net" }
	//   }
	//   and {
	//     path {
	//       elem { name: "system" }
	//       elem { name: "clock" }
	//       elem { name: "state" }
	//       elem { name: "timezone-name" }
	//     }
	//     equal { string_val: "Europe/London" }
	//   }
	// }
	//
	// Then the query only evaluates to true if /system/state/hostname
	// == "box0" && /system/state/domain-name == "openconfig.net" &&
	// /system/clock/state/timezone-name == "Europe/London".
	And []*PathValueMatch `protobuf:"bytes,20,rep,name=and,proto3" json:"and,omitempty"`
	// or specifies a set of matches that any one of which must be
	// met for the test to evaluate to true.
	//
	// For example, if the following message is spceified:
	//
	// {
	//   or {
	//     path {
	//       elem { name: "system" }
	//       elem { name: "state" }
	//       elem { name: "hostname" }
	//     }
	//     equal { string_val: "box0.openconfig.net" }
	//     and {
	//       path {
	//         elem { name: "system" }
	//         elem { name: "state" }
	//         elem { name: "domain-name" }
	//       }
	//       equal { string_val: "openconfig.net" }
	//   }
	//   or {
	//     path {
	//       elem { name: "system" }
	//       elem { name: "state" }
	//       elem { name: "hostname" }
	//     }
	//     equal { string_val: "box0" }
	//     and {
	//       path {
	//         elem { name: "system" }
	//         elem { name: "state" }
	//         elem { name: "domain-name" }
	//       }
	//       equal { string_val: "openconfig.net" }
	//     }
	//   }
	// }
	//
	// Then the query only evaluates to true if:
	//  (/system/state/hostname == "box0.openconfig.net" &&
	//  /system/state/domain-name == "openconfig") ||
	//  (/system/state/hostname == "box0" && /system/state/domain-name ==
	//  "openconfig.net")
	//
	//  In this case, the top-level query has no specified path or criteria. Such
	//  a query evaluates to true to allow such nesting.
	Or                   []*PathValueMatch `protobuf:"bytes,21,rep,name=or,proto3" json:"or,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PathValueMatch) Reset()         { *m = PathValueMatch{} }
func (m *PathValueMatch) String() string { return proto.CompactTextString(m) }
func (*PathValueMatch) ProtoMessage()    {}
func (*PathValueMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{9}
}
func (m *PathValueMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathValueMatch.Unmarshal(m, b)
}
func (m *PathValueMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathValueMatch.Marshal(b, m, deterministic)
}
func (dst *PathValueMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathValueMatch.Merge(dst, src)
}
func (m *PathValueMatch) XXX_Size() int {
	return xxx_messageInfo_PathValueMatch.Size(m)
}
func (m *PathValueMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_PathValueMatch.DiscardUnknown(m)
}

var xxx_messageInfo_PathValueMatch proto.InternalMessageInfo

type isPathValueMatch_Criteria interface {
	isPathValueMatch_Criteria()
}

type PathValueMatch_Equal struct {
	Equal *gnmi.TypedValue `protobuf:"bytes,2,opt,name=equal,proto3,oneof"`
}

func (*PathValueMatch_Equal) isPathValueMatch_Criteria() {}

func (m *PathValueMatch) GetCriteria() isPathValueMatch_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (m *PathValueMatch) GetPath() *gnmi.Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *PathValueMatch) GetEqual() *gnmi.TypedValue {
	if x, ok := m.GetCriteria().(*PathValueMatch_Equal); ok {
		return x.Equal
	}
	return nil
}

func (m *PathValueMatch) GetAnd() []*PathValueMatch {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *PathValueMatch) GetOr() []*PathValueMatch {
	if m != nil {
		return m.Or
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PathValueMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PathValueMatch_OneofMarshaler, _PathValueMatch_OneofUnmarshaler, _PathValueMatch_OneofSizer, []interface{}{
		(*PathValueMatch_Equal)(nil),
	}
}

func _PathValueMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PathValueMatch)
	// criteria
	switch x := m.Criteria.(type) {
	case *PathValueMatch_Equal:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Equal); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PathValueMatch.Criteria has unexpected type %T", x)
	}
	return nil
}

func _PathValueMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PathValueMatch)
	switch tag {
	case 2: // criteria.equal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gnmi.TypedValue)
		err := b.DecodeMessage(msg)
		m.Criteria = &PathValueMatch_Equal{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PathValueMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PathValueMatch)
	// criteria
	switch x := m.Criteria.(type) {
	case *PathValueMatch_Equal:
		s := proto.Size(x.Equal)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SchemaPathComplete defines the input for a test that checks that at least
// one instance of a particular schema path is sent to the test framework. It
// can be used to check for path coverage of a particular target.
type SchemaPathComplete struct {
	// prefix is a gNMI path that should be appended to each path in the
	// paths list to form an absolute schema path.
	Prefix *gnmi.Path `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// paths is the list of paths that are expected to be received by the
	// test framework.
	Path                 []*gnmi.Path `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SchemaPathComplete) Reset()         { *m = SchemaPathComplete{} }
func (m *SchemaPathComplete) String() string { return proto.CompactTextString(m) }
func (*SchemaPathComplete) ProtoMessage()    {}
func (*SchemaPathComplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{10}
}
func (m *SchemaPathComplete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaPathComplete.Unmarshal(m, b)
}
func (m *SchemaPathComplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaPathComplete.Marshal(b, m, deterministic)
}
func (dst *SchemaPathComplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaPathComplete.Merge(dst, src)
}
func (m *SchemaPathComplete) XXX_Size() int {
	return xxx_messageInfo_SchemaPathComplete.Size(m)
}
func (m *SchemaPathComplete) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaPathComplete.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaPathComplete proto.InternalMessageInfo

func (m *SchemaPathComplete) GetPrefix() *gnmi.Path {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *SchemaPathComplete) GetPath() []*gnmi.Path {
	if m != nil {
		return m.Path
	}
	return nil
}

// GetSetTest contains all the information specific to a configuration
// test - which is expected to use RPCs to interact with configuration. Set is
// used to change the configuration, and Get or Subscribe can be used to
// retrieve configuration values to verify the target's initial or final states.
type GetSetTest struct {
	// Types that are valid to be assigned to Args:
	//	*GetSetTest_OperValidation
	Args                 isGetSetTest_Args `protobuf_oneof:"args"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetSetTest) Reset()         { *m = GetSetTest{} }
func (m *GetSetTest) String() string { return proto.CompactTextString(m) }
func (*GetSetTest) ProtoMessage()    {}
func (*GetSetTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{11}
}
func (m *GetSetTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSetTest.Unmarshal(m, b)
}
func (m *GetSetTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSetTest.Marshal(b, m, deterministic)
}
func (dst *GetSetTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSetTest.Merge(dst, src)
}
func (m *GetSetTest) XXX_Size() int {
	return xxx_messageInfo_GetSetTest.Size(m)
}
func (m *GetSetTest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSetTest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSetTest proto.InternalMessageInfo

type isGetSetTest_Args interface {
	isGetSetTest_Args()
}

type GetSetTest_OperValidation struct {
	OperValidation *GetSetValidationTest `protobuf:"bytes,10,opt,name=oper_validation,json=operValidation,proto3,oneof"`
}

func (*GetSetTest_OperValidation) isGetSetTest_Args() {}

func (m *GetSetTest) GetArgs() isGetSetTest_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *GetSetTest) GetOperValidation() *GetSetValidationTest {
	if x, ok := m.GetArgs().(*GetSetTest_OperValidation); ok {
		return x.OperValidation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSetTest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSetTest_OneofMarshaler, _GetSetTest_OneofUnmarshaler, _GetSetTest_OneofSizer, []interface{}{
		(*GetSetTest_OperValidation)(nil),
	}
}

func _GetSetTest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSetTest)
	// args
	switch x := m.Args.(type) {
	case *GetSetTest_OperValidation:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OperValidation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GetSetTest.Args has unexpected type %T", x)
	}
	return nil
}

func _GetSetTest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSetTest)
	switch tag {
	case 10: // args.oper_validation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetSetValidationTest)
		err := b.DecodeMessage(msg)
		m.Args = &GetSetTest_OperValidation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GetSetTest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSetTest)
	// args
	switch x := m.Args.(type) {
	case *GetSetTest_OperValidation:
		s := proto.Size(x.OperValidation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GetSetValidationTest describes a test that validates configuration sets
// on a target. It does not validate the underlying behaviour of the system,
// but restricts itself to validating that setting and retrieving configuration
// returns the expected result.
//
// The expected test methodology is as follows:
//   1. Set the configuration of the target to a "known good" initial state.
//   2. Validate that the configuration running on the target matches this
//      state.
//   3. Perform an update or replace operation on the configuration.
//   4. Validate that the new state of the target matches that which is
//      expected.
type GetSetValidationTest struct {
	// initialise_oper is the operation to initialise the target. It may consist
	// of a configuration to be set and/or get request that validates the target's
	// current state.
	InitialiseOper *GetSetValidationOper `protobuf:"bytes,1,opt,name=initialise_oper,json=initialiseOper,proto3" json:"initialise_oper,omitempty"`
	// test_oper is the operation that is under test in the validation test.  The
	// Get and/or Set operations may be set within the operation such that the
	// test can validate a set, a set followed by a get, or solely a get
	// operation.
	TestOper             *GetSetValidationOper `protobuf:"bytes,2,opt,name=test_oper,json=testOper,proto3" json:"test_oper,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetSetValidationTest) Reset()         { *m = GetSetValidationTest{} }
func (m *GetSetValidationTest) String() string { return proto.CompactTextString(m) }
func (*GetSetValidationTest) ProtoMessage()    {}
func (*GetSetValidationTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{12}
}
func (m *GetSetValidationTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSetValidationTest.Unmarshal(m, b)
}
func (m *GetSetValidationTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSetValidationTest.Marshal(b, m, deterministic)
}
func (dst *GetSetValidationTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSetValidationTest.Merge(dst, src)
}
func (m *GetSetValidationTest) XXX_Size() int {
	return xxx_messageInfo_GetSetValidationTest.Size(m)
}
func (m *GetSetValidationTest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSetValidationTest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSetValidationTest proto.InternalMessageInfo

func (m *GetSetValidationTest) GetInitialiseOper() *GetSetValidationOper {
	if m != nil {
		return m.InitialiseOper
	}
	return nil
}

func (m *GetSetValidationTest) GetTestOper() *GetSetValidationOper {
	if m != nil {
		return m.TestOper
	}
	return nil
}

// GetSetValidationOper describes an individual operation within a
// GetSetValidationTest. If the message consists of:
//
//  * Solely a SetRequest - the SetRequest is sent to the test target, and the
//    result checked against the expected error status in set_ok.
//  * Solely a GetRequest - the GetRequest is sent to the test target, and the
//    result checked against the expected GetResponse.
//  * Both a SetRequest and a GetRequest - the SetRequest is sent to the test
//    target, and the return value compared against set_ok. Subsequently, the
//    GetRequest is sent to the test target, the return code compared to get_ok
//    and the GetResponse compared to the expected GetResponse.
type GetSetValidationOper struct {
	// Types that are valid to be assigned to Setrequest:
	//	*GetSetValidationOper_Set
	//	*GetSetValidationOper_CommonSetrequest
	Setrequest isGetSetValidationOper_Setrequest `protobuf_oneof:"setrequest"`
	// set_ok specifies whether the Set RPC should be successful.
	SetOk GetSetValidationOper_OperResult `protobuf:"varint,10,opt,name=set_ok,json=setOk,proto3,enum=tests.GetSetValidationOper_OperResult" json:"set_ok,omitempty"`
	// Types that are valid to be assigned to Getrequest:
	//	*GetSetValidationOper_Get
	//	*GetSetValidationOper_CommonGetrequest
	Getrequest isGetSetValidationOper_Getrequest `protobuf_oneof:"getrequest"`
	GetOk      GetSetValidationOper_OperResult   `protobuf:"varint,20,opt,name=get_ok,json=getOk,proto3,enum=tests.GetSetValidationOper_OperResult" json:"get_ok,omitempty"`
	// Types that are valid to be assigned to Getresponse:
	//	*GetSetValidationOper_GetResponse
	//	*GetSetValidationOper_CommonGetresponse
	Getresponse          isGetSetValidationOper_Getresponse `protobuf_oneof:"getresponse"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *GetSetValidationOper) Reset()         { *m = GetSetValidationOper{} }
func (m *GetSetValidationOper) String() string { return proto.CompactTextString(m) }
func (*GetSetValidationOper) ProtoMessage()    {}
func (*GetSetValidationOper) Descriptor() ([]byte, []int) {
	return fileDescriptor_tests_6c3490c220f7d14a, []int{13}
}
func (m *GetSetValidationOper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSetValidationOper.Unmarshal(m, b)
}
func (m *GetSetValidationOper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSetValidationOper.Marshal(b, m, deterministic)
}
func (dst *GetSetValidationOper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSetValidationOper.Merge(dst, src)
}
func (m *GetSetValidationOper) XXX_Size() int {
	return xxx_messageInfo_GetSetValidationOper.Size(m)
}
func (m *GetSetValidationOper) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSetValidationOper.DiscardUnknown(m)
}

var xxx_messageInfo_GetSetValidationOper proto.InternalMessageInfo

type isGetSetValidationOper_Setrequest interface {
	isGetSetValidationOper_Setrequest()
}
type isGetSetValidationOper_Getrequest interface {
	isGetSetValidationOper_Getrequest()
}
type isGetSetValidationOper_Getresponse interface {
	isGetSetValidationOper_Getresponse()
}

type GetSetValidationOper_Set struct {
	Set *gnmi.SetRequest `protobuf:"bytes,1,opt,name=set,proto3,oneof"`
}
type GetSetValidationOper_CommonSetrequest struct {
	CommonSetrequest string `protobuf:"bytes,2,opt,name=common_setrequest,json=commonSetrequest,proto3,oneof"`
}
type GetSetValidationOper_Get struct {
	Get *gnmi.GetRequest `protobuf:"bytes,11,opt,name=get,proto3,oneof"`
}
type GetSetValidationOper_CommonGetrequest struct {
	CommonGetrequest string `protobuf:"bytes,12,opt,name=common_getrequest,json=commonGetrequest,proto3,oneof"`
}
type GetSetValidationOper_GetResponse struct {
	GetResponse *gnmi.GetResponse `protobuf:"bytes,21,opt,name=get_response,json=getResponse,proto3,oneof"`
}
type GetSetValidationOper_CommonGetresponse struct {
	CommonGetresponse string `protobuf:"bytes,22,opt,name=common_getresponse,json=commonGetresponse,proto3,oneof"`
}

func (*GetSetValidationOper_Set) isGetSetValidationOper_Setrequest()                {}
func (*GetSetValidationOper_CommonSetrequest) isGetSetValidationOper_Setrequest()   {}
func (*GetSetValidationOper_Get) isGetSetValidationOper_Getrequest()                {}
func (*GetSetValidationOper_CommonGetrequest) isGetSetValidationOper_Getrequest()   {}
func (*GetSetValidationOper_GetResponse) isGetSetValidationOper_Getresponse()       {}
func (*GetSetValidationOper_CommonGetresponse) isGetSetValidationOper_Getresponse() {}

func (m *GetSetValidationOper) GetSetrequest() isGetSetValidationOper_Setrequest {
	if m != nil {
		return m.Setrequest
	}
	return nil
}
func (m *GetSetValidationOper) GetGetrequest() isGetSetValidationOper_Getrequest {
	if m != nil {
		return m.Getrequest
	}
	return nil
}
func (m *GetSetValidationOper) GetGetresponse() isGetSetValidationOper_Getresponse {
	if m != nil {
		return m.Getresponse
	}
	return nil
}

func (m *GetSetValidationOper) GetSet() *gnmi.SetRequest {
	if x, ok := m.GetSetrequest().(*GetSetValidationOper_Set); ok {
		return x.Set
	}
	return nil
}

func (m *GetSetValidationOper) GetCommonSetrequest() string {
	if x, ok := m.GetSetrequest().(*GetSetValidationOper_CommonSetrequest); ok {
		return x.CommonSetrequest
	}
	return ""
}

func (m *GetSetValidationOper) GetSetOk() GetSetValidationOper_OperResult {
	if m != nil {
		return m.SetOk
	}
	return GetSetValidationOper_NO_ERROR
}

func (m *GetSetValidationOper) GetGet() *gnmi.GetRequest {
	if x, ok := m.GetGetrequest().(*GetSetValidationOper_Get); ok {
		return x.Get
	}
	return nil
}

func (m *GetSetValidationOper) GetCommonGetrequest() string {
	if x, ok := m.GetGetrequest().(*GetSetValidationOper_CommonGetrequest); ok {
		return x.CommonGetrequest
	}
	return ""
}

func (m *GetSetValidationOper) GetGetOk() GetSetValidationOper_OperResult {
	if m != nil {
		return m.GetOk
	}
	return GetSetValidationOper_NO_ERROR
}

func (m *GetSetValidationOper) GetGetResponse() *gnmi.GetResponse {
	if x, ok := m.GetGetresponse().(*GetSetValidationOper_GetResponse); ok {
		return x.GetResponse
	}
	return nil
}

func (m *GetSetValidationOper) GetCommonGetresponse() string {
	if x, ok := m.GetGetresponse().(*GetSetValidationOper_CommonGetresponse); ok {
		return x.CommonGetresponse
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GetSetValidationOper) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GetSetValidationOper_OneofMarshaler, _GetSetValidationOper_OneofUnmarshaler, _GetSetValidationOper_OneofSizer, []interface{}{
		(*GetSetValidationOper_Set)(nil),
		(*GetSetValidationOper_CommonSetrequest)(nil),
		(*GetSetValidationOper_Get)(nil),
		(*GetSetValidationOper_CommonGetrequest)(nil),
		(*GetSetValidationOper_GetResponse)(nil),
		(*GetSetValidationOper_CommonGetresponse)(nil),
	}
}

func _GetSetValidationOper_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GetSetValidationOper)
	// setrequest
	switch x := m.Setrequest.(type) {
	case *GetSetValidationOper_Set:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Set); err != nil {
			return err
		}
	case *GetSetValidationOper_CommonSetrequest:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CommonSetrequest)
	case nil:
	default:
		return fmt.Errorf("GetSetValidationOper.Setrequest has unexpected type %T", x)
	}
	// getrequest
	switch x := m.Getrequest.(type) {
	case *GetSetValidationOper_Get:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Get); err != nil {
			return err
		}
	case *GetSetValidationOper_CommonGetrequest:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CommonGetrequest)
	case nil:
	default:
		return fmt.Errorf("GetSetValidationOper.Getrequest has unexpected type %T", x)
	}
	// getresponse
	switch x := m.Getresponse.(type) {
	case *GetSetValidationOper_GetResponse:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetResponse); err != nil {
			return err
		}
	case *GetSetValidationOper_CommonGetresponse:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CommonGetresponse)
	case nil:
	default:
		return fmt.Errorf("GetSetValidationOper.Getresponse has unexpected type %T", x)
	}
	return nil
}

func _GetSetValidationOper_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GetSetValidationOper)
	switch tag {
	case 1: // setrequest.set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gnmi.SetRequest)
		err := b.DecodeMessage(msg)
		m.Setrequest = &GetSetValidationOper_Set{msg}
		return true, err
	case 2: // setrequest.common_setrequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Setrequest = &GetSetValidationOper_CommonSetrequest{x}
		return true, err
	case 11: // getrequest.get
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gnmi.GetRequest)
		err := b.DecodeMessage(msg)
		m.Getrequest = &GetSetValidationOper_Get{msg}
		return true, err
	case 12: // getrequest.common_getrequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Getrequest = &GetSetValidationOper_CommonGetrequest{x}
		return true, err
	case 21: // getresponse.get_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gnmi.GetResponse)
		err := b.DecodeMessage(msg)
		m.Getresponse = &GetSetValidationOper_GetResponse{msg}
		return true, err
	case 22: // getresponse.common_getresponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Getresponse = &GetSetValidationOper_CommonGetresponse{x}
		return true, err
	default:
		return false, nil
	}
}

func _GetSetValidationOper_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GetSetValidationOper)
	// setrequest
	switch x := m.Setrequest.(type) {
	case *GetSetValidationOper_Set:
		s := proto.Size(x.Set)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSetValidationOper_CommonSetrequest:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.CommonSetrequest)))
		n += len(x.CommonSetrequest)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// getrequest
	switch x := m.Getrequest.(type) {
	case *GetSetValidationOper_Get:
		s := proto.Size(x.Get)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSetValidationOper_CommonGetrequest:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.CommonGetrequest)))
		n += len(x.CommonGetrequest)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// getresponse
	switch x := m.Getresponse.(type) {
	case *GetSetValidationOper_GetResponse:
		s := proto.Size(x.GetResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GetSetValidationOper_CommonGetresponse:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.CommonGetresponse)))
		n += len(x.CommonGetresponse)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Default)(nil), "tests.Default")
	proto.RegisterType((*SubscribeTest)(nil), "tests.SubscribeTest")
	proto.RegisterType((*Test)(nil), "tests.Test")
	proto.RegisterType((*Credentials)(nil), "tests.Credentials")
	proto.RegisterType((*Connection)(nil), "tests.Connection")
	proto.RegisterType((*FakeTest)(nil), "tests.FakeTest")
	proto.RegisterType((*HasKeys)(nil), "tests.HasKeys")
	proto.RegisterType((*HasKeys_Item)(nil), "tests.HasKeys.Item")
	proto.RegisterMapType((map[string]string)(nil), "tests.HasKeys.Item.KeyEntry")
	proto.RegisterType((*GNMIPathCompliance)(nil), "tests.GNMIPathCompliance")
	proto.RegisterType((*DataTreePaths)(nil), "tests.DataTreePaths")
	proto.RegisterType((*DataTreePaths_QueryStep)(nil), "tests.DataTreePaths.QueryStep")
	proto.RegisterMapType((map[string]string)(nil), "tests.DataTreePaths.QueryStep.KeyEntry")
	proto.RegisterType((*DataTreePaths_TestQuery)(nil), "tests.DataTreePaths.TestQuery")
	proto.RegisterType((*DataTreePaths_ListQuery)(nil), "tests.DataTreePaths.ListQuery")
	proto.RegisterType((*DataTreePaths_RequiredPaths)(nil), "tests.DataTreePaths.RequiredPaths")
	proto.RegisterType((*DataTreePaths_RequiredValues)(nil), "tests.DataTreePaths.RequiredValues")
	proto.RegisterType((*PathValueMatch)(nil), "tests.PathValueMatch")
	proto.RegisterType((*SchemaPathComplete)(nil), "tests.SchemaPathComplete")
	proto.RegisterType((*GetSetTest)(nil), "tests.GetSetTest")
	proto.RegisterType((*GetSetValidationTest)(nil), "tests.GetSetValidationTest")
	proto.RegisterType((*GetSetValidationOper)(nil), "tests.GetSetValidationOper")
	proto.RegisterEnum("tests.GetSetValidationOper_OperResult", GetSetValidationOper_OperResult_name, GetSetValidationOper_OperResult_value)
}

func init() { proto.RegisterFile("proto/tests/tests.proto", fileDescriptor_tests_6c3490c220f7d14a) }

var fileDescriptor_tests_6c3490c220f7d14a = []byte{
	// 1404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xf7, 0xda, 0x8e, 0x3f, 0x8e, 0x63, 0x3b, 0x9d, 0xa6, 0xfd, 0x6f, 0xfd, 0xa7, 0x51, 0xd8,
	0x42, 0x1b, 0x09, 0xea, 0x94, 0x50, 0x55, 0x2d, 0xa8, 0x48, 0xa4, 0x49, 0xe3, 0xaa, 0x69, 0x52,
	0x26, 0xa1, 0xe2, 0x02, 0xc9, 0x9a, 0xd8, 0x27, 0xeb, 0x95, 0xed, 0xdd, 0xed, 0xcc, 0x38, 0xd4,
	0x77, 0x3c, 0x41, 0xaf, 0x10, 0xef, 0x80, 0x04, 0xb7, 0x3c, 0x00, 0x8f, 0xc5, 0x15, 0x9a, 0x8f,
	0xfd, 0x30, 0x4d, 0x52, 0xe0, 0x26, 0xf2, 0x39, 0xe7, 0x77, 0xce, 0xfc, 0xce, 0xc7, 0x9e, 0x99,
	0xc0, 0xff, 0x62, 0x1e, 0xc9, 0x68, 0x53, 0xa2, 0x90, 0xc2, 0xfc, 0xed, 0x6a, 0x0d, 0x59, 0xd2,
	0x42, 0xe7, 0x9e, 0x1f, 0xc8, 0xd1, 0xec, 0xa4, 0x3b, 0x88, 0xa6, 0x9b, 0x51, 0x8c, 0xe1, 0x20,
	0x0a, 0x4f, 0x03, 0x7f, 0xd3, 0x0f, 0xa7, 0xc1, 0xa6, 0x71, 0xd5, 0x3f, 0xd5, 0x1f, 0xe3, 0xe8,
	0xd5, 0xa1, 0xba, 0x83, 0xa7, 0x6c, 0x36, 0x91, 0xde, 0xdb, 0x32, 0x34, 0x8f, 0x66, 0x27, 0x62,
	0xc0, 0x83, 0x13, 0x3c, 0x46, 0x21, 0xc9, 0x3d, 0xa8, 0x72, 0x7c, 0x3d, 0x43, 0x21, 0x5d, 0x67,
	0xdd, 0xd9, 0x68, 0x6c, 0x5d, 0xef, 0x6a, 0xd7, 0x14, 0x45, 0x8d, 0x95, 0x26, 0x30, 0x72, 0x0b,
	0x9a, 0x93, 0xc8, 0xef, 0x73, 0x14, 0x71, 0x14, 0x0a, 0x14, 0x6e, 0x71, 0xdd, 0xd9, 0xa8, 0xd1,
	0xe5, 0x49, 0xe4, 0xd3, 0x44, 0x47, 0x6e, 0x42, 0xfd, 0x94, 0x8d, 0xb1, 0xaf, 0x38, 0xbb, 0xb0,
	0xee, 0x6c, 0xd4, 0x7b, 0x05, 0x5a, 0x53, 0x2a, 0x7d, 0xea, 0x23, 0x68, 0xc7, 0x4c, 0x8e, 0xfa,
	0x67, 0x6c, 0x12, 0x0c, 0x99, 0x0c, 0xa2, 0xd0, 0x6d, 0xe8, 0xd3, 0x5b, 0x5d, 0x93, 0xb2, 0x25,
	0xdc, 0x2b, 0xd0, 0x96, 0x02, 0xbe, 0x4a, 0x71, 0xe4, 0x13, 0xa8, 0x8d, 0x98, 0xe8, 0x8f, 0x71,
	0x2e, 0xdc, 0xe5, 0x05, 0x9f, 0x1e, 0x13, 0xcf, 0x71, 0x2e, 0x7a, 0x05, 0x5a, 0x1d, 0x99, 0x9f,
	0x64, 0x1f, 0xae, 0x8a, 0xc1, 0x08, 0xa7, 0x4c, 0x9f, 0x36, 0x88, 0xa6, 0xf1, 0x04, 0x25, 0xba,
	0x4d, 0xed, 0x77, 0xc3, 0xfa, 0x1d, 0x69, 0xc4, 0x4b, 0x26, 0x47, 0x4f, 0x2c, 0xa0, 0x57, 0xa0,
	0x24, 0xf3, 0x4b, 0xb4, 0xe4, 0x2b, 0x68, 0x0f, 0x99, 0x64, 0x7d, 0xc9, 0x11, 0xfb, 0xca, 0x22,
	0xdc, 0x96, 0x8e, 0xb4, 0x9a, 0xb0, 0x66, 0x92, 0x1d, 0x73, 0x44, 0x15, 0x4b, 0xf1, 0x68, 0x0e,
	0xf3, 0x0a, 0xf2, 0x25, 0xac, 0x9c, 0xb1, 0xc9, 0x0c, 0xf3, 0x69, 0xb7, 0x2f, 0x48, 0xbb, 0xad,
	0x91, 0xb9, 0xbc, 0xf7, 0xe1, 0xaa, 0x6a, 0x4c, 0x96, 0x48, 0xc0, 0xc2, 0x01, 0xba, 0x2b, 0x0b,
	0xa9, 0xec, 0x1d, 0xbc, 0x78, 0x96, 0x26, 0xa2, 0x01, 0x2a, 0x95, 0xc4, 0x2f, 0xd3, 0x6e, 0x57,
	0xa0, 0xcc, 0xb8, 0x2f, 0xbc, 0x5f, 0x8a, 0x50, 0xd6, 0x1d, 0x59, 0x87, 0xc6, 0x10, 0x55, 0xc7,
	0x63, 0x4d, 0x4b, 0xcd, 0x42, 0x9d, 0xe6, 0x55, 0xc4, 0x85, 0xaa, 0x0c, 0xa6, 0x18, 0xcd, 0xa4,
	0xee, 0xf8, 0x12, 0x4d, 0x44, 0x72, 0x1d, 0x2a, 0xa6, 0x5a, 0x6e, 0x49, 0xbb, 0x59, 0x89, 0x7c,
	0x06, 0x30, 0x88, 0xc2, 0x10, 0x07, 0x3a, 0x64, 0x59, 0x33, 0xbd, 0x62, 0x99, 0x3e, 0x49, 0x0d,
	0x34, 0x07, 0x22, 0xf7, 0xa1, 0x2e, 0x92, 0xc9, 0xd3, 0x73, 0x93, 0x15, 0x77, 0x61, 0x6e, 0x7b,
	0x05, 0x9a, 0x01, 0xc9, 0xa7, 0x50, 0xf5, 0x51, 0xf6, 0x05, 0x4a, 0x3b, 0x46, 0xc9, 0x29, 0x7b,
	0x28, 0x8f, 0x50, 0x5a, 0x87, 0x8a, 0xaf, 0x25, 0xd2, 0xcd, 0xcf, 0xa6, 0x19, 0xa1, 0xb6, 0xc5,
	0x3f, 0xb5, 0x03, 0x9a, 0x1f, 0x56, 0x55, 0x2b, 0x39, 0x8f, 0xd1, 0x63, 0xd0, 0x78, 0xc2, 0x71,
	0x88, 0xa1, 0x0c, 0xd8, 0x44, 0x90, 0x0e, 0xd4, 0x38, 0x8a, 0x68, 0x72, 0x86, 0xdc, 0x96, 0x2b,
	0x95, 0x95, 0x6d, 0x26, 0x90, 0x87, 0x6c, 0x8a, 0xba, 0x58, 0x75, 0x9a, 0xca, 0xca, 0x16, 0x33,
	0x21, 0x7e, 0x88, 0xf8, 0xd0, 0xd6, 0x2b, 0x95, 0xbd, 0xb7, 0x0e, 0x40, 0x56, 0x19, 0x55, 0x58,
	0xc9, 0xb8, 0x8f, 0xd2, 0x1e, 0x60, 0x25, 0xd5, 0x0a, 0x36, 0x1c, 0x72, 0x14, 0xc2, 0x46, 0x4f,
	0x44, 0x72, 0x1f, 0x1a, 0x83, 0x8c, 0xa3, 0x8e, 0xdf, 0xd8, 0x22, 0x49, 0xcd, 0x33, 0x0b, 0xcd,
	0xc3, 0xf2, 0xad, 0x2d, 0x2f, 0xb4, 0xd6, 0x5b, 0x83, 0x5a, 0x52, 0x13, 0x42, 0xa0, 0xac, 0x88,
	0x6a, 0x2e, 0x35, 0xaa, 0x7f, 0x7b, 0x7f, 0x38, 0x50, 0xb5, 0xdf, 0x1d, 0x59, 0x53, 0x76, 0x39,
	0xb2, 0x7b, 0x04, 0xcc, 0x1e, 0x51, 0xd3, 0x48, 0xb5, 0x9e, 0xdc, 0x81, 0x72, 0x20, 0x71, 0xea,
	0x16, 0xd7, 0x4b, 0x1b, 0x8d, 0xad, 0xab, 0x8b, 0x5f, 0x6d, 0xf7, 0x99, 0xc4, 0x29, 0xd5, 0x80,
	0x4e, 0x08, 0x65, 0x25, 0x91, 0x2e, 0x94, 0xc6, 0x38, 0x77, 0x1d, 0x8d, 0xff, 0xe0, 0x1c, 0x7c,
	0xf7, 0x39, 0xce, 0x77, 0x43, 0xc9, 0xe7, 0x54, 0x01, 0x3b, 0x0f, 0xa0, 0x96, 0x28, 0xc8, 0x4a,
	0xe2, 0xab, 0xca, 0xa3, 0x7e, 0x92, 0x55, 0x58, 0xd2, 0xdf, 0x94, 0x2d, 0x99, 0x11, 0xbe, 0x28,
	0x3e, 0x74, 0xbc, 0x39, 0x90, 0x77, 0x3f, 0x1c, 0x72, 0x13, 0x60, 0x30, 0xc2, 0xc1, 0xb8, 0x8f,
	0x13, 0x9c, 0xda, 0xa4, 0xeb, 0x5a, 0xb3, 0x3b, 0xc1, 0x29, 0xf9, 0x10, 0x96, 0x8d, 0xd9, 0x76,
	0xc8, 0x44, 0x6d, 0x68, 0xdd, 0xb1, 0x69, 0x53, 0x0a, 0x89, 0x78, 0xe0, 0x07, 0xa1, 0xed, 0xb6,
	0x81, 0x1c, 0x6a, 0x95, 0xf7, 0x63, 0x15, 0x9a, 0x3b, 0x7f, 0x5b, 0x12, 0x75, 0x95, 0x68, 0x3f,
	0x8a, 0xed, 0x5c, 0x35, 0xb6, 0xd6, 0xce, 0x5b, 0x2f, 0x5d, 0xd5, 0x93, 0x6f, 0x66, 0xc8, 0xe7,
	0xb4, 0xa6, 0xcc, 0x87, 0x31, 0xf2, 0xce, 0x6f, 0x0e, 0xd4, 0xb5, 0xee, 0x48, 0x62, 0xac, 0x1a,
	0xa6, 0x27, 0xd0, 0x14, 0x41, 0xff, 0x26, 0x8f, 0x4c, 0x5d, 0x4c, 0x0f, 0xee, 0x9c, 0x1b, 0x38,
	0x0d, 0xb0, 0x58, 0x5e, 0x72, 0x03, 0x6a, 0x63, 0x9c, 0xf7, 0x75, 0x48, 0x93, 0x4a, 0x75, 0x8c,
	0xf3, 0x03, 0x36, 0xc5, 0xff, 0x5a, 0xf9, 0xce, 0xaf, 0x45, 0xa8, 0xa7, 0x79, 0x90, 0xfb, 0xb0,
	0x24, 0x24, 0xc6, 0xc2, 0x76, 0x7c, 0xed, 0x72, 0x76, 0xd4, 0x80, 0xc9, 0x0e, 0x34, 0xd5, 0xc7,
	0x3f, 0x09, 0x84, 0x34, 0xb7, 0x42, 0xf1, 0x92, 0xa2, 0xed, 0x07, 0xf6, 0xb0, 0x5e, 0x81, 0x36,
	0x7c, 0x94, 0x4a, 0xd6, 0xc3, 0xfb, 0x1c, 0x5a, 0xea, 0x82, 0x0b, 0x38, 0x0e, 0xed, 0x6a, 0x37,
	0xdf, 0x8e, 0x77, 0x6e, 0x18, 0x6a, 0xa1, 0xe9, 0xa2, 0xe7, 0x79, 0x05, 0x39, 0x80, 0x76, 0x1a,
	0x4c, 0x27, 0x2b, 0xec, 0xf6, 0xbb, 0x75, 0x69, 0xb4, 0x57, 0x1a, 0xaa, 0xee, 0x3c, 0xbe, 0xa0,
	0x49, 0x36, 0x50, 0xe7, 0x27, 0x07, 0xea, 0x69, 0x06, 0xaa, 0x1f, 0x67, 0x8c, 0xf7, 0x73, 0x2d,
	0xae, 0x9e, 0x31, 0xae, 0xfa, 0x41, 0x1e, 0x03, 0x84, 0xf8, 0x46, 0xf6, 0x5f, 0x2b, 0xe0, 0xa5,
	0x05, 0xc9, 0xa6, 0xa8, 0xae, 0x3c, 0x4c, 0xe4, 0xbb, 0x50, 0x39, 0x0d, 0x26, 0x12, 0xb9, 0x5b,
	0xd2, 0x9d, 0xb8, 0x66, 0x5d, 0x5f, 0x9a, 0xab, 0x78, 0x86, 0x2f, 0x98, 0x1c, 0x8c, 0xa8, 0x05,
	0x75, 0xbe, 0x85, 0xe6, 0x42, 0x41, 0x88, 0x07, 0x95, 0x98, 0xe3, 0x69, 0xf0, 0xe6, 0x9c, 0x5d,
	0x60, 0x2d, 0x64, 0x1d, 0x96, 0x4c, 0x9d, 0xcd, 0x28, 0xe6, 0x21, 0xc6, 0xd0, 0x41, 0x68, 0x2d,
	0x56, 0xe6, 0x1f, 0xc5, 0xdd, 0x84, 0xea, 0x54, 0xb1, 0xc3, 0x24, 0xf2, 0x05, 0xe4, 0x13, 0x94,
	0xf7, 0xbb, 0x03, 0xad, 0x45, 0xdb, 0x7b, 0x37, 0xd9, 0x06, 0x2c, 0xe1, 0xeb, 0x19, 0x9b, 0xd8,
	0xca, 0xae, 0x18, 0xc0, 0xf1, 0x3c, 0xb6, 0x4c, 0x7b, 0x05, 0x6a, 0x00, 0xe4, 0x0e, 0x94, 0x58,
	0x38, 0x74, 0x57, 0x2f, 0x63, 0xa2, 0x10, 0xe4, 0x63, 0x28, 0x46, 0xdc, 0xbd, 0x76, 0x19, 0xae,
	0x18, 0xf1, 0x6d, 0x80, 0xda, 0x80, 0x07, 0x12, 0x79, 0xc0, 0xbc, 0xef, 0x80, 0xbc, 0xfb, 0x74,
	0xc9, 0xd5, 0xa8, 0x78, 0x61, 0x8d, 0xb2, 0xfc, 0x4a, 0xe7, 0xe5, 0xe7, 0x7d, 0x0f, 0x90, 0xdd,
	0x9c, 0xe4, 0x29, 0xb4, 0xd5, 0x32, 0xca, 0xbf, 0x5a, 0xcc, 0xcd, 0xfc, 0xff, 0x85, 0x5b, 0x36,
	0x7b, 0xab, 0xd8, 0x1b, 0xb4, 0xa5, 0xbc, 0x32, 0x6d, 0xfa, 0xe6, 0xf8, 0xd9, 0x81, 0xd5, 0xf3,
	0x5c, 0xc8, 0x0e, 0xb4, 0x83, 0x30, 0x50, 0x57, 0x52, 0x20, 0x30, 0xbf, 0x00, 0x2f, 0x3a, 0x48,
	0xed, 0x3c, 0xda, 0xca, 0x7c, 0x94, 0x4c, 0x1e, 0xe6, 0x17, 0x68, 0xf1, 0xfd, 0xfe, 0xe9, 0xf6,
	0xf4, 0xfe, 0x2c, 0xbd, 0x4b, 0x4c, 0x87, 0xfc, 0x08, 0x4a, 0x02, 0x93, 0x07, 0xb2, 0xed, 0xf6,
	0x11, 0x4a, 0xfb, 0x34, 0xee, 0x15, 0xa8, 0x32, 0x93, 0xbb, 0x70, 0x65, 0x10, 0x4d, 0xa7, 0x51,
	0xa8, 0x1e, 0x22, 0xc9, 0xa3, 0xba, 0x68, 0xdf, 0xbe, 0x2b, 0xc6, 0x74, 0x94, 0x5a, 0xc8, 0x63,
	0xa8, 0x08, 0x94, 0xfd, 0x68, 0xac, 0xab, 0xd9, 0xda, 0xba, 0x7d, 0x09, 0xc9, 0xae, 0x66, 0x8a,
	0x62, 0x36, 0x91, 0x74, 0x49, 0xa0, 0x3c, 0x1c, 0x2b, 0x4e, 0x7e, 0xfa, 0xde, 0xb1, 0x9c, 0xf6,
	0x32, 0x4e, 0x0e, 0x55, 0xe6, 0x1c, 0x27, 0x3f, 0xe3, 0xb4, 0xac, 0x39, 0x39, 0x09, 0xa7, 0xbd,
	0x05, 0x4e, 0xbe, 0xe1, 0xb4, 0xfa, 0xef, 0x38, 0xf9, 0x9a, 0xd3, 0x03, 0x58, 0x56, 0xee, 0xc9,
	0xbf, 0x06, 0xee, 0x35, 0xfb, 0x18, 0xcb, 0xc8, 0x19, 0x43, 0xaf, 0xa8, 0x97, 0x6f, 0x22, 0x92,
	0x4d, 0x20, 0x79, 0x96, 0xd6, 0xfb, 0xba, 0xa6, 0x59, 0xa4, 0x57, 0x72, 0x34, 0x8d, 0xc9, 0xbb,
	0x0d, 0x90, 0x9d, 0x4e, 0x96, 0xa1, 0x76, 0x70, 0xd8, 0xdf, 0xa5, 0xf4, 0x90, 0xae, 0x14, 0x08,
	0x40, 0xe5, 0xe9, 0xd7, 0xcf, 0xf6, 0x77, 0x77, 0x56, 0x9c, 0xed, 0x65, 0x80, 0xac, 0x17, 0x4a,
	0xca, 0xaa, 0xb0, 0xdd, 0x84, 0x46, 0xee, 0xb4, 0x93, 0x8a, 0xfe, 0x67, 0xe9, 0xf3, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xaa, 0x91, 0xe1, 0xd7, 0x80, 0x0d, 0x00, 0x00,
}
